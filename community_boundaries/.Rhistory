}
}
}
}
}
return(probmat)
}
probmat=c_of_75(deck)
print("75a")
prob_a
mean(prob_a)
sd(prob_a)
print("75b")
prob_b
mean(prob_b)
sd(prob_b)
print("75c")
probmat/10000
library("ggplot2")
deck=c(rep(0,10),rep(1,10),rep(2,10),rep(3,10),rep(4,2),rep(5,2),rep(6,16))
playgame_a= function(turn,situationoftable,trial,numcards){
flag=0
index=trial[turn+7]+1
numcards[index]=as.integer(numcards[index])+1
if(numcards[1]>0){
numcards[1]=numcards[1]-1
situationoftable=situationoftable+1
}
for(i in 2:7){
if(situationoftable>=i-1 && numcards[i]>0){
numcards[i]=numcards[i]-1
flag=1
break
}
}
resultlist=list(flag,situationoftable,cost,numcards)
return(resultlist)
}
playgame_b= function(turn,situationoftable,trial,numcards){
flag=0
index=trial[turn+7]+1
numcards[index]=as.integer(numcards[index])+1
if(numcards[1]>0){
numcards[1]=numcards[1]-1
situationoftable=situationoftable+1
}
cost=0
for(i in 2:7){
if(situationoftable>=i-1 && numcards[i]>0){
numcards[i]=numcards[i]-1
flag=1
cost=i-1
break
}
}
resultlist=list(flag,situationoftable,cost,numcards)
return(resultlist)
}
prob_first_spell_on_4=function(deck){
trials=numeric(10)
for (n in 1:10){
count=0
for (i in 1:1000){
trial=sample(deck)
numcards=numeric(7)
for(j in 1:7){
numcards[j]=sum(trial[1:7]==j-1)
}
situationoftable=0
turn=0
while (turn<4){
turn=turn+1
resultlist=playgame_b(turn,situationoftable,trial,numcards)
result=unlist(resultlist)
situationoftable=result[2]
numcards=result[3:9]
if(turn<4 && result[1]==1){
break
}
else if(turn<4 && result[1]==0){
next
}
else if(turn==4 && result[1]==0){
break
}
else if(turn==4 && result[1]==1){
count=count+1
}
}
}
trials[n]=count/1000
}
return(trials)
}
prob_a=prob_first_spell_on_4(deck)
prob_first_spell_cost_4=function(deck){
trials=numeric(10)
for (n in 1:10){
count=0
for (i in 1:1000){
trial=sample(deck)
numcards=numeric(7)
for(j in 1:7){
numcards[j]=sum(trial[1:7]==j-1)
}
situationoftable=0
turn=0
while (TRUE){
turn=turn+1
resultlist=playgame_b(turn,situationoftable,trial,numcards)
result=unlist(resultlist)
situationoftable=result[2]
cost=result[3]
numcards=result[4:10]
if(cost<4 && result[1]==1){
break
}
else if(cost==4 && result[1]==1){
count=count+1
break
}
else if(cost==0 && result[1]==0){
next
}
else if(cost>4 && result[1]==1){
break
}
}
}
trials[n]=count/1000
}
return(trials)
}
prob_b=prob_first_spell_cost_4(deck)
probmat=matrix(0,6,6)
c_of_75=function(deck){
probmat=matrix(0,6,6)
for(t in 1:6){
for(s in 1:6){
for(i in 1:10000){
trial=sample(deck)
numcards=numeric(7)
for(j in 1:7){
numcards[j]=sum(trial[1:7]==j-1)
}
situationoftable=0
turn=0
while (TRUE){
turn=turn+1
resultlist=playgame_b(turn,situationoftable,trial,numcards)
result=unlist(resultlist)
situationoftable=result[2]
cost=result[3]
numcards=result[4:10]
if(turn==t && cost==s && result[1]==1){
probmat[t,s]=probmat[t,s]+1
break
}
else if(turn<t && result[1]==1){
break
}
else if(turn<t && result[1]==0){
next
}
else if(cost<s && result[1]==1){
break
}
else if(cost>s && result[1]==1){
break
}
else if(result[1]==0){
next
}
}
}
}
}
return(probmat)
}
probmat=c_of_75(deck)
print("75a")
prob_a
mean(prob_a)
sd(prob_a)
print("75b")
prob_b
mean(prob_b)
sd(prob_b)
print("75c")
probmat/10000
x=c(1,2,3,"1ed",TRUE)
x
x[1,]
x[,1]
a=c(1,2,3)
b=c("text")
c=c(1.3,1.5)
d=c(TRUE,FALSE)
e=c(-1,-5)
x=list(a,b,c,d,e)
x[1,]
x
x[1,3]
x[1][2]
x[1]
x[2]
x[1,]
x=c(1,2,3,4,5,6)
x[c(-1,-3)]
x[-c(1,3)]
x[c(1,3)]
x[-1]
x[-2]
vec=numeric(0)
vec
1:length(vec)
seq_along(vec)
x=4
`%divisible%` = function(x,y){
if(x/y){
return(TRUE)
}
else(y/x){
`%divisible%` = function(x,y){
if(x/y){
return(TRUE)
}
else if(y/x){
return(FALSE)
}
}
?paste
`%+%` = function(s1,s2){
return(paste(s1,s2))
}
ssss + dewd
ssss %+% dewd
"ssss" %+% "dewd"
`%+%` = function(s1,s2){
return(paste(s1,s2,sep = ""))
}
"ssss" %+% "dewd"
`%||%` = function(x,y){
if(is.na(x)==TRUE){
return(x)
}
else{
return(y)
}
}
`%||%` = function(x,y){
if(is.null(x)==TRUE){
return(x)
}
else{
return(y)
}
}
`%||%` = function(x,y){
if(is.null(x)==TRUE){
return(x)
}
else{
return(y)
}
}
x=NULL
y=3
x %||% y
`%||%` = function(x,y){
if(is.null(x)==TRUE){
return(x)
}
else{
return(y)
}
}
x=NULL
y=3
x %||% y
?paste0
gamma(-1)
gamma(4/3)
(gamma(4/3)*5)/(0.2+1.2+0.2+0.9+0.3)
((gamma(4/3)*5)/(0.2+1.2+0.2+0.9+0.3))**(3)
4**(5/3)/gamma(5/3)
x=c(2.7,1.2,2.4,2.7,2.1,1.5)
w=3
sum(log(x/w))
6/sum(log(x/w))
install.packages("reprex")
library(reprex)
?stopifnot
library(rmaps)
library(rMaps)
?crosslet
?crosslet
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
require(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
library(rMaps)
crosslet(
x = "country",
y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),
data = web_index
)
map <- Leaflet$new()
map$setView(c(51.505, -0.09), zoom = 13)
map$tileLayer(provider = 'Stamen.Watercolor')
map$marker(
c(51.5, -0.09),
bindPopup = 'Hi. I am a popup'
)
map
L2 <- Leaflet$new()
L2$setView(c(29.7632836,  -95.3632715), 10)
L2$tileLayer(provider = "MapQuestOpen.OSM")
L2
data(crime, package = 'ggmap')
library(plyr)
crime_dat = ddply(crime, .(lat, lon), summarise, count = length(address))
crime_dat = toJSONArray2(na.omit(crime_dat), json = F, names = F)
cat(rjson::toJSON(crime_dat[1:2]))
[[27.5071143,-99.5055471,1],[29.4836146,-95.0618715,10]]
# Add leaflet-heat plugin. Thanks to Vladimir Agafonkin
L2$addAssets(jshead = c(
"http://leaflet.github.io/Leaflet.heat/dist/leaflet-heat.js"
))
# Add javascript to modify underlying chart
L2$setTemplate(afterScript = sprintf("
<script>
var addressPoints = %s
var heat = L.heatLayer(addressPoints).addTo(map)
</script>
", rjson::toJSON(crime_dat)
))
L2
# Add leaflet-heat plugin. Thanks to Vladimir Agafonkin
L2$addAssets(jshead = c(
"http://leaflet.github.io/Leaflet.heat/dist/leaflet-heat.js"
))
# Add javascript to modify underlying chart
L2$setTemplate(afterScript = sprintf("
<script>
var addressPoints = %s
var heat = L.heatLayer(addressPoints).addTo(map)
</script>
", rjson::toJSON(crime_dat)
))
L2
library(shiny)
library(shiny)
runExample("01_hello")
x=c(21,23,27,19,17,18,20,15,17,22)
mean(x)
sd(x)
mice_sample=x=c(21,23,27,19,17,18,20,15,17,22)
upper_bound=mean(mice_sample)+sd(mice_sample)/(10**(1/2))
lower_bound=mean(mice_sample)-sd(mice_sample)/(10**(1/2))
mice_sample=x=c(21,23,27,19,17,18,20,15,17,22)
upper_bound=mean(mice_sample)+sd(mice_sample)/(10**(1/2))
lower_bound=mean(mice_sample)-sd(mice_sample)/(10**(1/2))
(upper_bound=mean(mice_sample)+3*sd(mice_sample)/(10**(1/2)))
(lower_bound=mean(mice_sample)-3*sd(mice_sample)/(10**(1/2)))
install.packages("leaflet")
library(leaflet)
install.packages("ggmap")
library(ggmap)
library(ggplot2)
library(ggmap)
get_googlemap("waco texas", zoom = 12) %>% ggmap()
get_googlemap("chicago", zoom = 12) %>% ggmap()
somePlace <-ggmap::geocode("Washington,DC")
somePlace
leaflet(somePlace) %>% addTiles() %>% addMarkers()
somePlace <-ggmap::geocode("Chicago")
somePlace
leaflet(somePlace) %>% addTiles() %>% addMarkers()
?leaflet
m = leaflet() %>% addTiles()
m  # a map with the default OSM tile layer
m %>% fitBounds(0, 40, 10, 50)
m = m %>% setView(-93.65, 42.0285, zoom = 17)
m
m %>% addPopups(-93.65, 42.0285, 'Here is the <b>Department of Statistics</b>, ISU')
rand_lng = function(n = 10) rnorm(n, -93.65, .01)
rand_lat = function(n = 10) rnorm(n, 42.0285, .01)
mice_sample
G=(mean(mice_sample)-25)/(sd(mice_sample)/(10**(1/2)))
G=(mean(mice_sample)-25)/(sd(mice_sample)/(10**(1/2)))
G
G=(10-7)/(1/(10**(1/2)))
G
G=(10-7)/(1/(100**(1/2)))
G
G=(10-7)/(1/100**(1/2))
G
std=1/100**(1/2)
G=(10-7)/std
G
popsd=1*100**(1/2)
G=(10-7)/popsd
G
se=1/100**(1/2)
G=(10-7)/se
G
?abs
G=(mean(mice_sample)-25)/(sd(mice_sample)/(10**(1/2)))
f = function(x) {1-1/sqrt(2*pi)*exp(-x^2/2)}
integrate(f, lower = -abs(G), upper = abs(G))
G=(mean(mice_sample)-25)/(sd(mice_sample)/(10**(1/2)))
f = function(x) {1/sqrt(2*pi)*exp(-x^2/2)}
integrate(f, lower = -abs(G), upper = abs(G))
G=(mean(mice_sample)-25)/(sd(mice_sample)/(10**(1/2)))
f = function(x) {1/sqrt(2*pi)*exp(-x^2/2)}
#integrate(f, lower = -abs(G), upper = abs(G))
p=1-integrate(f, lower = -abs(G), upper = abs(G))
integrate(f, lower = -abs(G), upper = abs(G))
as.numeric(integrate(f, lower = -abs(G), upper = abs(G)))
y=integrate(f, lower = -abs(G), upper = abs(G))
se=1/100**(1/2)
G=(10-7)/se
integrate(f, lower = -abs(G), upper = abs(G))
# Taken from: https://shiny.rstudio.com/tutorial/written-tutorial/lesson2/
library(shiny)
# Define UI ----
ui = fluidPage(
titlePanel("My Star Wars App"),
sidebarLayout(
sidebarPanel(),
mainPanel(
h6("Episode IV", align = "center"),
h6("A NEW HOPE", align = "center"),
h5("It is a period of civil war.", align = "center"),
h4("Rebel spaceships, striking", align = "center"),
h3("from a hidden base, have won", align = "center"),
h2("their first victory against the", align = "center"),
h1("evil Galactic Empire.")
)
)
)
# Define server logic ----
server = function(input, output) {
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(ggplot2)
library(leaflet)
library(ggmap)
setwd("~/Desktop/FA17/STAT385/project")
crime_2017=read.csv("Crimes_-_2017.csv"
)
fewer_data=crime_2017[c(1:100),]
leaflet(fewer_data) %>% addTiles() %>% addMarkers()
View(fewer_data)
View(fewer_data)
leaflet(fewer_data) %>% addTiles() %>% addMarkers(popup =fewer_data$Primary.Type)
library(plotly)
install.packages('rgdal')
library(rgdal)
?readOGR
Neighborhoods=readORG(".","Boundaries - Community Areas (current)")
Neighborhoods=readOGR(".","Boundaries - Community Areas (current)")
setwd("~/Desktop/FA17/STAT385/project/Boundaries - Community Areas (current)")
Neighborhoods=readOGR(".","Boundaries - Community Areas (current)")
?readOGR
setwd("~/Desktop/FA17/STAT385/project")
Neighborhoods=readOGR(dsn="~/desktop/FA17/STAT385/project/Boundaries - Community Areas (current)",layer = "geo_export_da8f554f-91fe-486b-9ffc-b5a51c4fe348")
setwd("~/Desktop/FA17/STAT385/project/Boundaries - Community Areas (current)")
Neighborhoods=readOGR(dsn=".",layer = "geo_export_da8f554f-91fe-486b-9ffc-b5a51c4fe348")
library(ggplot2)
library(leaflet)
library(ggmap)
library(plotly)
#install.packages('rgdal')
library(rgdal)
Neighborhoods=readOGR(dsn=".",layer = "geo_export_da8f554f-91fe-486b-9ffc-b5a51c4fe348")
Neighborhoods <- spTransform(Neighborhoods, CRS("+proj=longlat +datum=WGS84"))
Neighborhoods <- fortify(Neighborhoods)
ChicagoMap <- ChicagoMap + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='green', data=Neighborhoods, alpha=0)
ChicagoMap
ChicagoMap = ChicagoMap + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='green', data=Neighborhoods, alpha=0)
ChicagoMap
ChicagoMap = ChicagoMap + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='green', data=Neighborhoods, alpha=0)
ChicagoMap = ggplot() + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='green', data=Neighborhoods, alpha=0)
ChicagoMap
library(ggplot2)
library(leaflet)
library(ggmap)
library(plotly)
#install.packages('rgdal')
library(rgdal)
Neighborhoods=readOGR(dsn=".",layer = "geo_export_da8f554f-91fe-486b-9ffc-b5a51c4fe348")
Neighborhoods <- spTransform(Neighborhoods, CRS("+proj=longlat +datum=WGS84"))
Neighborhoods <- fortify(Neighborhoods)
leaflet(Neighborhoods) %>% addTiles() %>% addMarkers()
